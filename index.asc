:source-highlighter: pygments
:toc: left
:stem:

= Processamento Digital de Imagens

Bruno Silva

Link para as atividades: link:https://agostinhobritojr.github.io/tutorial/pdi/[atividades]

== 7. Filtragem no domínio da frequência

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_filtragem_no_dom%C3%ADnio_da_frequ%C3%AAncia[exemplo]

=== 7.1 Exercícios

O exercíco propõe a criação de um programa que auxilie no melhoramento de imagens com iluminação irregular utilizando o 
filtro homomórfico, para tal foi criada uma interface com _sliders_ para ajustar os paramentros do filtro e são mostradas 
em janelas diferentes a imagem com a aplicação do filtro, a imagem original e o filtro que está sendo aplicado.

Arquivo: link:homomorfico.cpp[homomorfico.cpp]

[source, cpp]
----
#include <iostream>
#include <opencv2/opencv.hpp>
#include <cmath>

using namespace cv;
using namespace std;

int c_slider = 0;
int c_slider_max = 100;

int gamaL_slider = 0;
int gamaL_slider_max = 100;

int gamaH_slider = 0;
int gamaH_slider_max = 100;

int d0_slider = 0;
int d0_slider_max = 100;

Mat image1, image2, blended;
Mat imageTop;

char TrackbarName[50];

Mat padded, filter, mag, complexImage;
Mat image, imagegray, tmp, imageO, imagegrayO;
Mat_<float> realInput, zeros;
vector<Mat> planos;
int dft_M, dft_N;

void deslocaDFT(Mat& image ){
    Mat tmp, A, B, C, D;

    // se a imagem tiver tamanho impar, recorta a regiao para
    // evitar cópias de tamanho desigual
    image = image(Rect(0, 0, image.cols & -2, image.rows & -2));
    int cx = image.cols/2;
    int cy = image.rows/2;

    // reorganiza os quadrantes da transformada
    // A B   ->  D C
    // C D       B A
    A = image(Rect(0, 0, cx, cy));
    B = image(Rect(cx, 0, cx, cy));
    C = image(Rect(0, cy, cx, cy));
    D = image(Rect(cx, cy, cx, cy));

    // A <-> D
    A.copyTo(tmp);  D.copyTo(A);  tmp.copyTo(D);

    // C <-> B
    C.copyTo(tmp);  B.copyTo(C);  tmp.copyTo(B);
}

void on_trackbar(int, void*){

    imageO.copyTo(image);
    image.convertTo(image, CV_32F);
    log(image, image);

    dft_M = getOptimalDFTSize(image.rows);
    dft_N = getOptimalDFTSize(image.cols);

    // realiza o padding da imagem
    copyMakeBorder(image, padded, 0,
                   dft_M - image.rows, 0,
                   dft_N - image.cols,
                   BORDER_CONSTANT, Scalar::all(0));

    // parte imaginaria da matriz complexa (preenchida com zeros)
    zeros = Mat_<float>::zeros(padded.size());

    // prepara a matriz complexa para ser preenchida
    complexImage = Mat(padded.size(), CV_32FC2, Scalar(0));

    // a função de transferência (filtro frequencial) deve ter o
    // mesmo tamanho e tipo da matriz complexa
    filter = complexImage.clone();

    // cria uma matriz temporária para criar as componentes real
    // e imaginaria do filtro ideal
    tmp = Mat(dft_M, dft_N, CV_32F);

    cvtColor(imageO, imagegrayO, CV_BGR2GRAY);
    imshow("original", imagegrayO);
    cvtColor(image, imagegray, CV_BGR2GRAY);

    // realiza o padding da imagem
    copyMakeBorder(imagegray, padded, 0,
                   dft_M - image.rows, 0,
                   dft_N - image.cols,
                   BORDER_CONSTANT, Scalar::all(0));
    // limpa o array de matrizes que vao compor a
    // imagem complexa
    planos.clear();
    // cria a compoente real
    realInput = Mat_<float>(padded);
    // insere as duas componentes no array de matrizes
    planos.push_back(realInput);
    planos.push_back(zeros);

    // combina o array de matrizes em uma unica
    // componente complexa
    merge(planos, complexImage);

    // calcula o dft
    dft(complexImage, complexImage);

    // realiza a troca de quadrantes
    deslocaDFT(complexImage);

    float d0, gamaH, gamaL;
    gamaL = gamaL_slider/10.0;
    gamaH = gamaH_slider/10.0;
    d0 = d0_slider/10.0;

    // prepara o filtro passa-baixas ideal
    for(int i=0; i<dft_M; i++){

        for(int j=0; j<dft_N; j++){
            tmp.at<float> (i,j) = (gamaH - gamaL) *
                    (1.0 - exp(-1.0 * (float)c_slider * ((pow(((float) i - dft_M/2.0),2)+pow(((float) j - dft_N/2.0),2))/(d0*d0)) ))
                    + gamaL;
        }
    }

    // cria a matriz com as componentes do filtro e junta
    // ambas em uma matriz multicanal complexa
    Mat comps[]= {tmp, tmp};
    merge(comps, 2, filter);

    // aplica o filtro frequencial
    mulSpectrums(complexImage,filter,complexImage,0);

    // troca novamente os quadrantes
    deslocaDFT(complexImage);

    // calcula a DFT inversa
    idft(complexImage, complexImage);

    // limpa o array de planos
    planos.clear();

    // separa as partes real e imaginaria da
    // imagem filtrada
    split(complexImage, planos);

    // normaliza a parte real para exibicao
    normalize(planos[0], planos[0], 0, 1, CV_MINMAX);
    planos[0].convertTo(planos[0], CV_32F);
    imshow("addweighted", planos[0]);
}

int main(int argvc, char** argv){

    imageO = imread("biel.png");

    namedWindow("addweighted", 1);
    sprintf( TrackbarName, "C x %d", c_slider_max );
    createTrackbar( TrackbarName, "addweighted",
                    &c_slider,
                    c_slider_max,
                    on_trackbar);
    on_trackbar(c_slider, 0 );

    sprintf( TrackbarName, "GAMA L x %d", gamaL_slider_max );
    createTrackbar( TrackbarName, "addweighted",
                    &gamaL_slider,
                    gamaL_slider_max,
                    on_trackbar);
    on_trackbar(gamaL_slider, 0 );

    sprintf( TrackbarName, "GAMA H x %d", gamaH_slider_max );
    createTrackbar( TrackbarName, "addweighted",
                    &gamaH_slider,
                    gamaH_slider_max,
                    on_trackbar);
    on_trackbar(gamaH_slider, 0 );

    sprintf( TrackbarName, "D0 x %d", d0_slider_max );
    createTrackbar( TrackbarName, "addweighted",
                    &d0_slider,
                    d0_slider_max,
                    on_trackbar);
    on_trackbar(d0_slider, 0 );


    waitKey(0);
    return 0;
}
----

O código acima consiste em realizar o processo de filtragem. Na primeira parte, tratamos a imagem, onde se é aplicada um logaritmo natural antes de levar para o domínio da frequência.

[source, cpp]
----
    ​image.convertTo(image, CV_32F);
    log(image, image);
----

Então se realiza a transformada de Fourier:

[source, cpp]
----
    ​dft(complexImage, complexImage);
    deslocaDFT(complexImage);
----

Então é aplicado o filtro na imagem:

[source, cpp]
----
    float d0, gamaH, gamaL;
   ​gamaL = gamaL_slider/10.0;
   ​gamaH = gamaH_slider/10.0;
   ​d0 = d0_slider/10.0;

   ​// prepara o filtro passa-baixas ideal
   ​for(int i=0; i<dft_M; i++){

       ​for(int j=0; j<dft_N; j++){
           ​tmp.at<float> (i,j) = (gamaH - gamaL) *
                   ​(1.0 - exp(-1.0 * (float)c_slider * ((pow(((float) i - dft_M/2.0),2)+pow(((float) j - dft_N/2.0),2))/(d0*d0)) ))
                   ​+ gamaL;
       ​}
   ​}

   ​// cria a matriz com as componentes do filtro e junta
   ​// ambas em uma matriz multicanal complexa
   ​Mat comps[]= {tmp, tmp};
   ​merge(comps, 2, filter);

   ​// aplica o filtro frequencial
   ​mulSpectrums(complexImage,filter,complexImage,0);

----

Então é aplicada a inversa de Fourier e a exponencial na imagem no domínio do espaço:

[source, cpp]
----
   deslocaDFT(complexImage);
   ​idft(complexImage, complexImage);

   ​planos.clear();

   ​// separa as partes real e imaginaria da imagem filtrada
   ​split(complexImage, planos);

   ​// normaliza a parte real para exibicao
   ​normalize(planos[0], planos[0], 0, 1, CV_MINMAX);
   ​planos[0].convertTo(planos[0], CV_32F);
----

image::homomorfico_original.png[Original, title="Original", width=256, height=256]
image::homomorfico1.png[Imagem filtrada 1, title="Imagem filtrada 1", role="left", width=256, height=256]
image::homomorfico2.png[Imagem filtrada 2, title="Imagem filtrada 2", role="center", width=256, height=256]
image::homomorfico3.png[Imagem filtrada 3, title="Imagem filtrada 3", role="right", width=256, height=256]

== 8 Detecção de bordas com o algoritmo de Canny

=== 8.1 Canny e a arte com pontilhismo

=== 8.2 Exercícios

O exercício solicita a implementação de um programa para usar as bordas produzidas pelo algoritmo de Canny para 
melhorar a qualidade da imagem pontilhista gerada.

O código criado para este exercíco é uma composição do algorítmo do filtro de Canny
e do filtro do pontilhismo que estão na link:https://agostinhobritojr.github.io/tutorial/pdi/#_canny_e_a_arte_com_pontilhismo[página da disciplina].
Para a realização do processo, inicialmente foi aplicado o filtro do pontilhismo na imagem. 
Depois foi feito um for para passar 4 vezes o filtro de canny na imagem. Para cada uma das
iterações alterou-se o limiar do filtro com a inteção de obter, a cada iteração, uma imagem filtrada com menos bordas.
A cada iteração, a imagem filtrada era percorrida pixel a pixel e, caso hovesse um pixel com ton de cinza maior
que zero, era desenhado um círculo na imagem filtrada com pontilhismo na mesma coordenada desse pixel.
Dessa forma, as bordas tornavam-se mais destacadas. O código é mostrado abaixo.

Arquivo: link:cannypoints.cpp[cannypoints.cpp]

[source, cpp]
----
#include <iostream>
#include <opencv2/opencv.hpp>
#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <numeric>
#include <ctime>
#include <cstdlib>

using namespace std;
using namespace cv;

#define STEP 5
#define JITTER 3
#define RAIO 5

int main(int argc, char** argv){
  vector<int> yrange;
  vector<int> xrange;

  Mat imagemOriginal, borderImagemOriginal;
  Mat imagemComPontilhismo;
  int width, height;
  int gray;
  int x, y;

  imagemOriginal= imread(argv[1],CV_LOAD_IMAGE_GRAYSCALE);

  srand(time(0));

  if(!imagemOriginal.data){
      cout << "nao abriu" << argv[1] << endl;
    cout << argv[0] << " imagem_original_lenna.png";
    exit(0);
  }

  width = imagemOriginal.size().width;
  height = imagemOriginal.size().height;

  xrange.resize(height/STEP);
  yrange.resize(width/STEP);

  iota(xrange.begin(), xrange.end(), 0);
  iota(yrange.begin(), yrange.end(), 0);

  for(uint i=0; i<xrange.size(); i++){
    xrange[i]= xrange[i]*STEP+STEP/2;
    yrange[i]= yrange[i]*STEP+STEP/2;
  }

  imagemOriginal.copyTo(imagemComPontilhismo);
  random_shuffle(xrange.begin(), xrange.end());

  for(auto i : xrange){
    random_shuffle(yrange.begin(), yrange.end());
    for(auto j : yrange){
      x = i+rand()%(2*JITTER)-JITTER+1;
      y = j+rand()%(2*JITTER)-JITTER+1;
      gray = imagemOriginal.at<uchar>(x,y);
      circle(imagemComPontilhismo,
             cv::Point(y,x),
             RAIO,
             CV_RGB(gray,gray,gray),
             -1,
             CV_AA);
    }
  }

  imshow("Imagem com Pontilhismo", imagemComPontilhismo);
  imwrite("img_filtro_pontilhismo.jpg", imagemComPontilhismo);

  for(int it=0; it<5; it++){
     Canny(imagemOriginal, borderImagemOriginal, 10*it, 50*it);
     int raio = 5-it;

     for(int i=0; i<height; i++ ){
        for(int j=0; j<width; j++){
           if(borderImagemOriginal.at<uchar>(i,j)>0){
              gray = imagemOriginal.at<uchar>(i,j);
              circle(imagemComPontilhismo,
                     cv::Point(j,i),
                     raio,
                     CV_RGB(gray,gray,gray),
                     -1,
                     CV_AA);
           }
        }
     }
  }

  imshow("Imagem com CannyPoints", imagemComPontilhismo);
  imwrite("img_filtro_Canny_oints.jpg", imagemComPontilhismo);

  waitKey();
  return 0;
}
----

A imagem abaixo foi dada como entrada para o programa.

image::img_original_lenna.png[Imagem Original, title="Imagem original", width=256, height=256]

O resultado da imagem de entrada com o filtro pontilhismo é exibido na imagem abaixo.

image::img_filtro_pontilhismo.jpg[Imagem com pontilhismo, title="[Imagem com pontilhismo", role="left", width=256, height=256]

O resultado da aplicação do filtro CannyPoints na imagemde entrada é vista na imagem abaixo.

image::img_filtro_canny_points.jpg[Imagem com CannyPoints, title="Imagem com CannyPoints", role="center", width=256, height=256]


